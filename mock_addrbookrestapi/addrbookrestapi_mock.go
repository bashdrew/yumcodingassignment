// Automatically generated by MockGen. DO NOT EDIT!
// Source: bashdrew/yumcodingassignment/addrbookrestapi (interfaces: AddrBookRestAPIClient)

package mock_addrbookrestapi

import (
	addrbookrestapi "bashdrew/yumcodingassignment/addrbookrestapi"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of AddrBookRestAPIClient interface
type MockAddrBookRestAPIClient struct {
	ctrl     *gomock.Controller
	recorder *_MockAddrBookRestAPIClientRecorder
}

// Recorder for MockAddrBookRestAPIClient (not exported)
type _MockAddrBookRestAPIClientRecorder struct {
	mock *MockAddrBookRestAPIClient
}

func NewMockAddrBookRestAPIClient(ctrl *gomock.Controller) *MockAddrBookRestAPIClient {
	mock := &MockAddrBookRestAPIClient{ctrl: ctrl}
	mock.recorder = &_MockAddrBookRestAPIClientRecorder{mock}
	return mock
}

func (_m *MockAddrBookRestAPIClient) EXPECT() *_MockAddrBookRestAPIClientRecorder {
	return _m.recorder
}

func (_m *MockAddrBookRestAPIClient) DeletePerson(_param0 context.Context, _param1 *addrbookrestapi.PersonRequest, _param2 ...grpc.CallOption) (*addrbookrestapi.PersonReply, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeletePerson", _s...)
	ret0, _ := ret[0].(*addrbookrestapi.PersonReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookRestAPIClientRecorder) DeletePerson(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePerson", _s...)
}

func (_m *MockAddrBookRestAPIClient) GetPeople(_param0 context.Context, _param1 *addrbookrestapi.PersonRequest, _param2 ...grpc.CallOption) (*addrbookrestapi.PeopleReply, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetPeople", _s...)
	ret0, _ := ret[0].(*addrbookrestapi.PeopleReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookRestAPIClientRecorder) GetPeople(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPeople", _s...)
}

func (_m *MockAddrBookRestAPIClient) GetPerson(_param0 context.Context, _param1 *addrbookrestapi.PersonRequest, _param2 ...grpc.CallOption) (*addrbookrestapi.PersonReply, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetPerson", _s...)
	ret0, _ := ret[0].(*addrbookrestapi.PersonReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookRestAPIClientRecorder) GetPerson(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPerson", _s...)
}

func (_m *MockAddrBookRestAPIClient) PostPeople(_param0 context.Context, _param1 *addrbookrestapi.PeopleReply, _param2 ...grpc.CallOption) (*addrbookrestapi.PeopleReply, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PostPeople", _s...)
	ret0, _ := ret[0].(*addrbookrestapi.PeopleReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookRestAPIClientRecorder) PostPeople(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostPeople", _s...)
}

func (_m *MockAddrBookRestAPIClient) PostPerson(_param0 context.Context, _param1 *addrbookrestapi.PersonRequest, _param2 ...grpc.CallOption) (*addrbookrestapi.PersonReply, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PostPerson", _s...)
	ret0, _ := ret[0].(*addrbookrestapi.PersonReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookRestAPIClientRecorder) PostPerson(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostPerson", _s...)
}

func (_m *MockAddrBookRestAPIClient) PutPerson(_param0 context.Context, _param1 *addrbookrestapi.PersonRequest, _param2 ...grpc.CallOption) (*addrbookrestapi.PersonReply, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutPerson", _s...)
	ret0, _ := ret[0].(*addrbookrestapi.PersonReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookRestAPIClientRecorder) PutPerson(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutPerson", _s...)
}
