// Automatically generated by MockGen. DO NOT EDIT!
// Source: bashdrew/yumcodingassignment/addrbookdb (interfaces: AddrBookDBClient)

package mock_addrbookdb

import (
	addrbookdb "bashdrew/yumcodingassignment/addrbookdb"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of AddrBookDBClient interface
type MockAddrBookDBClient struct {
	ctrl     *gomock.Controller
	recorder *_MockAddrBookDBClientRecorder
}

// Recorder for MockAddrBookDBClient (not exported)
type _MockAddrBookDBClientRecorder struct {
	mock *MockAddrBookDBClient
}

func NewMockAddrBookDBClient(ctrl *gomock.Controller) *MockAddrBookDBClient {
	mock := &MockAddrBookDBClient{ctrl: ctrl}
	mock.recorder = &_MockAddrBookDBClientRecorder{mock}
	return mock
}

func (_m *MockAddrBookDBClient) EXPECT() *_MockAddrBookDBClientRecorder {
	return _m.recorder
}

func (_m *MockAddrBookDBClient) CreatePersonDB(_param0 context.Context, _param1 *addrbookdb.PersonRequestDB, _param2 ...grpc.CallOption) (*addrbookdb.PersonReplyDB, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreatePersonDB", _s...)
	ret0, _ := ret[0].(*addrbookdb.PersonReplyDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookDBClientRecorder) CreatePersonDB(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePersonDB", _s...)
}

func (_m *MockAddrBookDBClient) DeletePersonDB(_param0 context.Context, _param1 *addrbookdb.PersonRequestDB, _param2 ...grpc.CallOption) (*addrbookdb.PersonReplyDB, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeletePersonDB", _s...)
	ret0, _ := ret[0].(*addrbookdb.PersonReplyDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookDBClientRecorder) DeletePersonDB(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePersonDB", _s...)
}

func (_m *MockAddrBookDBClient) ReadPeopleDB(_param0 context.Context, _param1 *addrbookdb.PersonRequestDB, _param2 ...grpc.CallOption) (*addrbookdb.PeopleReplyDB, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ReadPeopleDB", _s...)
	ret0, _ := ret[0].(*addrbookdb.PeopleReplyDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookDBClientRecorder) ReadPeopleDB(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadPeopleDB", _s...)
}

func (_m *MockAddrBookDBClient) ReadPersonDB(_param0 context.Context, _param1 *addrbookdb.PersonRequestDB, _param2 ...grpc.CallOption) (*addrbookdb.PersonReplyDB, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ReadPersonDB", _s...)
	ret0, _ := ret[0].(*addrbookdb.PersonReplyDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookDBClientRecorder) ReadPersonDB(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadPersonDB", _s...)
}

func (_m *MockAddrBookDBClient) UpdatePersonDB(_param0 context.Context, _param1 *addrbookdb.PersonRequestDB, _param2 ...grpc.CallOption) (*addrbookdb.PersonReplyDB, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdatePersonDB", _s...)
	ret0, _ := ret[0].(*addrbookdb.PersonReplyDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAddrBookDBClientRecorder) UpdatePersonDB(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePersonDB", _s...)
}
